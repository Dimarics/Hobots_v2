import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "abstractblock.h"
        name: "AbstractBlock"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["Hobots/AbstractBlock 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "cursorShape"
            type: "Qt::CursorShape"
            read: "cursorShape"
            write: "setCursorShape"
            notify: "cursorShapeChanged"
            index: 0
        }
        Signal { name: "cursorShapeChanged" }
        Signal {
            name: "dragStart"
            Parameter { type: "AbstractBlock"; isPointer: true }
        }
        Signal {
            name: "dragMove"
            Parameter { type: "AbstractBlock"; isPointer: true }
        }
        Signal {
            name: "dropped"
            Parameter { type: "AbstractBlock"; isPointer: true }
        }
        Signal {
            name: "clicked"
            Parameter { type: "AbstractBlock"; isPointer: true }
        }
    }
    Component {
        file: "appbackend.h"
        name: "AppBackend"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/AppBackend 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "tempLocation"
            type: "QString"
            read: "tempLocation"
            index: 0
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "appDataLocation"
            type: "QString"
            read: "appDataLocation"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Property {
            name: "deviceName"
            type: "QString"
            read: "deviceName"
            write: "setDeviceName"
            notify: "deviceNameChanged"
            index: 2
        }
        Property {
            name: "availablePorts"
            type: "QStringList"
            read: "availablePorts"
            notify: "availablePortsChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "availableDevices"
            type: "QStringList"
            read: "availableDevices"
            write: "setAvailableDevices"
            notify: "availableDevicesChanged"
            index: 4
        }
        Property {
            name: "device"
            type: "QObject"
            isPointer: true
            read: "device"
            write: "setDevice"
            notify: "deviceChanged"
            index: 5
        }
        Signal { name: "deviceNameChanged" }
        Signal { name: "availablePortsChanged" }
        Signal { name: "availableDevicesChanged" }
        Signal { name: "deviceChanged" }
        Method {
            name: "loadModel"
            type: "bool"
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "saveFile"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "saveFile"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "readJSON"
            type: "QVariant"
            Parameter { name: "path"; type: "QString" }
        }
        Method {
            name: "readJSON"
            type: "QVariant"
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        file: "filepicker.h"
        name: "FilePicker"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/FilePicker 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "fileMode"
            type: "int"
            read: "fileMode"
            write: "setFileMode"
            notify: "fileModeChanged"
            index: 0
        }
        Property {
            name: "title"
            type: "QString"
            read: "title"
            write: "setTitle"
            notify: "titleChanged"
            index: 1
        }
        Property {
            name: "acceptLabel"
            type: "QString"
            read: "acceptLabel"
            write: "setAcceptLabel"
            notify: "acceptLabelChanged"
            index: 2
        }
        Property {
            name: "currentFolder"
            type: "QString"
            read: "currentFolder"
            write: "setCurrentFolder"
            notify: "currentFolderChanged"
            index: 3
        }
        Property {
            name: "defaultSuffix"
            type: "QString"
            read: "defaultSuffix"
            write: "setDefaultSuffix"
            notify: "defaultSuffixChanged"
            index: 4
        }
        Property {
            name: "nameFilters"
            type: "QStringList"
            read: "nameFilters"
            write: "setNameFilters"
            notify: "nameFiltersChanged"
            index: 5
        }
        Signal { name: "fileModeChanged" }
        Signal { name: "titleChanged" }
        Signal { name: "acceptLabelChanged" }
        Signal { name: "currentFolderChanged" }
        Signal { name: "defaultSuffixChanged" }
        Signal { name: "nameFiltersChanged" }
        Signal {
            name: "fileReaded"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method { name: "readFile" }
    }
    Component {
        file: "firmwareloader.h"
        name: "FirmwareLoader"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/FirmwareLoader 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "State"
            values: ["Inactive", "Compile", "Upload"]
        }
        Property {
            name: "state"
            type: "State"
            read: "state"
            notify: "stateChanged"
            index: 0
            isReadonly: true
        }
        Signal { name: "stateChanged" }
        Method {
            name: "loadFirmware"
            Parameter { name: "code"; type: "QByteArray" }
            Parameter { name: "portName"; type: "QString" }
            Parameter { name: "fqbn"; type: "QString" }
            Parameter { name: "board_options"; type: "QString" }
        }
    }
    Component {
        file: "hd_serialportinterface.h"
        name: "HD_SerialPortInterface"
        accessSemantics: "reference"
        prototype: "SerialPortInterface"
        exports: ["Hobots/HD_SerialPortInterface 1.0"]
        exportMetaObjectRevisions: [256]
        Signal { name: "completed" }
    }
    Component {
        file: "hlt3_modbusinterface.h"
        name: "HLT3_ModbusInterface"
        accessSemantics: "reference"
        prototype: "ModbusInterface"
        exports: ["Hobots/HLT3_ModbusInterface 1.0"]
        exportMetaObjectRevisions: [256]
        Signal {
            name: "dataChanged"
            Parameter { name: "data"; type: "ushort"; isList: true }
        }
        Method {
            name: "rotateMotor"
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "dir"; type: "bool" }
            Parameter { name: "speed"; type: "float" }
        }
    }
    Component {
        file: "hlt3_serialportinterface.h"
        name: "HLT3_SerialPortInterface"
        accessSemantics: "reference"
        prototype: "SerialPortInterface"
        exports: ["Hobots/HLT3_SerialPortInterface 1.0"]
        exportMetaObjectRevisions: [256]
        Method {
            name: "rotateMotor"
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "dir"; type: "bool" }
            Parameter { name: "speed"; type: "quint8" }
        }
        Method {
            name: "rotateMotor"
            isCloned: true
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "dir"; type: "bool" }
        }
    }
    Component {
        file: "hobotinterface.h"
        name: "HobotInterface"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/HobotInterface 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "State"
            type: "quint8"
            values: [
                "Unconnected",
                "Connecting",
                "Connected",
                "Online",
                "Closing"
            ]
        }
        Enum {
            name: "Error"
            values: ["ConnectionError", "TimeoutError", "UnknownError"]
        }
        Property {
            name: "state"
            type: "State"
            read: "state"
            notify: "stateChanged"
            index: 0
            isReadonly: true
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "State" }
        }
        Signal {
            name: "errorOccurred"
            Parameter { name: "error"; type: "Error" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "QString" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "zChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "jointChanged"
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "value"; type: "double" }
        }
        Signal {
            name: "extruderTempChanged"
            Parameter { name: "value"; type: "double" }
        }
        Signal { name: "goalAchieved" }
        Method {
            name: "moveToX"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "moveToY"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "moveToZ"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "moveToXY"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "moveToXYZ"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "z"; type: "double" }
        }
        Method {
            name: "rotateJoint"
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "inversed"; type: "bool" }
        }
        Method {
            name: "rotateJoint"
            isCloned: true
            Parameter { name: "id"; type: "quint8" }
        }
        Method {
            name: "setJoint"
            Parameter { name: "id"; type: "quint8" }
            Parameter { name: "value"; type: "float" }
        }
        Method { name: "stay" }
        Method {
            name: "stay"
            Parameter { name: "id"; type: "quint8" }
        }
        Method { name: "stop" }
        Method { name: "goHome" }
        Method {
            name: "setSpeed"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setAccel"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setDecel"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setGrabEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setPompEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setLaserEnabled"
            Parameter { name: "enable"; type: "bool" }
        }
        Method {
            name: "setPWM"
            Parameter { name: "pin"; type: "quint8" }
            Parameter { name: "value"; type: "quint8" }
        }
        Method { name: "repeatLastAction" }
    }
    Component {
        file: "hobotprotocolinterface.h"
        name: "HobotProtocolInterface"
        accessSemantics: "reference"
        prototype: "HobotInterface"
        exports: ["Hobots/HobotProtocolInterface 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Protocol"
            values: ["InvalidProtocol", "ComPort", "SoftAP", "LAN"]
        }
        Property {
            name: "protocol"
            type: "Protocol"
            read: "protocol"
            write: "setProtocol"
            notify: "protocolChanged"
            index: 0
        }
        Signal { name: "protocolChanged" }
        Signal { name: "requestToSend" }
        Signal { name: "messageAccepted" }
        Method {
            name: "setProtocol"
            Parameter { name: "protocol"; type: "Protocol" }
        }
        Method {
            name: "setConnectionParameter"
            Parameter { name: "parameter"; type: "QString" }
        }
        Method { name: "connectDevice" }
        Method { name: "disconnectDevice" }
    }
    Component {
        file: "hobotsprotocolinterface.h"
        name: "HobotsProtocolInterface"
        accessSemantics: "reference"
        prototype: "HobotInterface"
        Signal { name: "messageAccepted" }
    }
    Component {
        file: "httpinterface.h"
        name: "HttpInterface"
        accessSemantics: "reference"
        prototype: "HobotsProtocolInterface"
        exports: ["Hobots/HttpInterface 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "modbusinterface.h"
        name: "ModbusInterface"
        accessSemantics: "reference"
        prototype: "HobotInterface"
        Enum {
            name: "Protocol"
            values: ["RTU", "SoftAP", "LAN"]
        }
        Property {
            name: "protocol"
            type: "Protocol"
            read: "protocol"
            write: "setProtocol"
            notify: "protocolChanged"
            index: 0
        }
        Property {
            name: "portName"
            type: "QString"
            read: "portName"
            write: "setPortName"
            notify: "portNameChanged"
            index: 1
        }
        Signal { name: "protocolChanged" }
        Signal { name: "portNameChanged" }
        Method {
            name: "setPortName"
            Parameter { name: "portName"; type: "QString" }
        }
        Method {
            name: "setProtocol"
            Parameter { name: "protocol"; type: "Protocol" }
        }
        Method { name: "connectDevice" }
        Method { name: "disconnectDevice" }
    }
    Component {
        file: "mousehandler.h"
        name: "MouseHandler"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["Hobots/MouseHandler 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "cursorShape"
            type: "Qt::CursorShape"
            read: "cursorShape"
            write: "setCursorShape"
            notify: "cursorShapeChanged"
            index: 0
        }
        Signal {
            name: "pressed"
            Parameter { name: "pos"; type: "QPointF" }
            Parameter { name: "button"; type: "Qt::MouseButton" }
        }
        Signal {
            name: "positionChanged"
            Parameter { name: "pos"; type: "QPointF" }
            Parameter { name: "button"; type: "Qt::MouseButton" }
        }
        Signal {
            name: "released"
            Parameter { name: "pos"; type: "QPointF" }
            Parameter { name: "button"; type: "Qt::MouseButton" }
        }
        Signal { name: "cursorShapeChanged" }
    }
    Component {
        file: "scriptbackend.h"
        name: "ScriptBackend"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/ScriptBackend 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Language"
            values: ["None", "Cpp", "Python"]
        }
        Property {
            name: "language"
            type: "Language"
            read: "language"
            write: "setLanguage"
            notify: "languageChanged"
            index: 0
        }
        Property {
            name: "textDocument"
            type: "QQuickTextDocument"
            isPointer: true
            read: "textDocument"
            write: "setTextDocument"
            notify: "textDocumentChanged"
            index: 1
        }
        Property {
            name: "terminalDocument"
            type: "QQuickTextDocument"
            isPointer: true
            read: "terminalDocument"
            write: "setTerminalDocument"
            notify: "terminalDocumentChanged"
            index: 2
        }
        Signal { name: "languageChanged" }
        Signal { name: "textDocumentChanged" }
        Signal { name: "terminalDocumentChanged" }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QString" }
        }
        Signal { name: "finished" }
        Method { name: "start" }
        Method { name: "stop" }
        Method { name: "next" }
    }
    Component {
        file: "serialportinterface.h"
        name: "SerialPortInterface"
        accessSemantics: "reference"
        prototype: "HobotInterface"
        Property {
            name: "portName"
            type: "QString"
            read: "portName"
            write: "setPortName"
            notify: "portNameChanged"
            index: 0
        }
        Signal { name: "portNameChanged" }
        Signal { name: "requestToSend" }
        Signal { name: "messageAccepted" }
        Method {
            name: "setPortName"
            Parameter { name: "portName"; type: "QString" }
        }
        Method { name: "connectDevice" }
        Method { name: "disconnectDevice" }
    }
    Component {
        file: "windowcustomizer.h"
        name: "WindowCustomizer"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["Hobots/WindowCustomizer 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "window"
            type: "QWindow"
            isPointer: true
            read: "window"
            write: "setWindow"
            notify: "windowChanged"
            index: 0
        }
        Signal { name: "windowChanged" }
    }
}
